invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
x$setinvmat(invmat)
invmat
}
check <- function() {
##browser()
y <- matrix(1:4, 2, 2)
x <- makeCacheMatrix()
x$set(y)
cacheSolve(x)
}
check()
check()
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
check <- function() {
##browser()
y <- matrix(1:4, 2, 2)
x <- makeCacheMatrix()
x$set(y)
cacheSolve(x)
cacheSolve(x)
}
check()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
x$setinvmat(invmat)
invmat
}
check <- function() {
##browser()
x <- makeCacheMatrix()
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
y <- matrix(1:9, 3, 3) ##Checking what happens if matrix is changed
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
check()
check()
check()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
x$setinvmat(invmat)
invmat
}
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(1:9, 3, 3)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
check()
y <- matrix(1:9, 3, 3)
solve(y)
y
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
x$setinvmat(invmat)
invmat
}
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(2:10, 3, 3)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
x$setinvmat(invmat)
invmat
}
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(c(2,3,4,9,8,7,4,3,2), 3, 3)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
x$setinvmat(invmat)
invmat
}
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(1:16, 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(16:1, 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
y
y <- matrix(16:1, 4, 4)
y
?rep
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(c(rep(1:4,4)), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
matrix(c(rep(1:4,4)), 4, 4)
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(c(1:5, 10:21), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(c(1:5, 10:20), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(rnorm(16), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("got invmat from cache")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
message("calculated invmat")
x$setinvmat(invmat)
invmat
}
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(rnorm(16), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##browser()
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("got invmat from cache")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
message("calculated invmat")
x$setinvmat(invmat)
invmat
}
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(rnorm(16), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
?solve
check <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(rnorm(16), 4, 4)
x$set(y)
print(cacheSolve(x, 2)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
check()
# Below are 3 functions:
# makeCacheMatrix - helps chaching an inverted matrix
# cacheSolve - finds an inverted matrix if never calculted, get the old from cache
# checkFUN - tests the other 2 functions behavior in action
## invmat - is a variable and a shortening that stands for Inverted Matrix
## makeCacheMatrix returns 4 subfunctions:
## set - sets a matrix to be inverted
## get - returns the matrix that was set
## setinvmat - caches an inverted matrix
## getinvmar - returns the cached inverted matrix
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y){
x <<- y
invmat <<- NULL
}
get <- function() x
setinvmat <- function(solvedmat) {
invmat <<- solvedmat
}
getinvmat <- function() invmat
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## cacheSolve returns a matrix that is the inverse of 'x'
## Prints messages if the InvMat was calculated or cached for better debugging
cacheSolve <- function(x, ...) {
invmat <- x$getinvmat()
if(!is.null(invmat)) {
message("got invmat from cache")
return(invmat)
}
data <- x$get()
invmat <- solve(data, ...)
message("calculated invmat")
x$setinvmat(invmat)
invmat
}
## checkFUN checks if other 2 functions are working correctly
checkFUN <- function() {
##Setting up functions to work with matrix
x <- makeCacheMatrix()
##Setting up a square matrix
y <- matrix(1:4, 2, 2)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
print(cacheSolve(x)) ##Should retrieve invmat from cache
##Checking what happens if the matrix is changed
y <- matrix(rnorm(16), 4, 4)
x$set(y)
print(cacheSolve(x)) ##Should calculate invmat
cacheSolve(x) ##Should retrieve invmat from cache
}
checkFUN()
